{"version":3,"sources":["TodoItem.js","services/api.js","store/actionTypes.js","store/actions/errors.js","store/actions/todos.js","NewTodoForm.js","TodosList.js","Nav.js","App.js","serviceWorker.js","store/reducers/index.js","store/reducers/errors.js","store/reducers/todos.js","index.js","store/index.js"],"names":["TodoItem","_ref","todo","onDelete","onComplete","s","textDecoration","completed","react_default","a","createElement","className","style","onClick","text","_id","apiCall","path","options","arguments","length","undefined","url","Promise","resolve","reject","fetch","then","res","ok","json","data","status","error","message","catch","err","console","log","concat","addError","type","_getTodos","todos","_addTodo","_updateTodo","_deleteTodo","id","NewTodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleSubmit","bind","assertThisInitialized","handleChange","e","preventDefault","createTodo","history","push","target","reset","defineProperty","name","value","setState","onSubmit","htmlFor","autoComplete","onChange","Component","defaultProps","TodoList","getTodos","val","deleteTodo","updateTodo","map","t","key","completeTask","Route","exact","component","NewTodoForm_NewTodoForm","connect","reduxState","objectSpread","dispatch","method","headers","Headers","Content-Type","body","JSON","stringify","Nav","NavLink","to","activeClassName","App","TodosList","render","Redirect","Boolean","window","location","hostname","match","rootReducer","combineReducers","errors","action","newState","toConsumableArray","filter","p","store","createStore","compose","applyMiddleware","thunk","ReactDOM","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0d03b73.chunk.js","sourcesContent":["import React from 'react';\r\n \r\nexport default ({todo, onDelete, onComplete}) => { \r\n   const s = {\r\n      textDecoration: todo.completed ? 'line-through' : 'none'\r\n   }\r\n   return (<li>\r\n      <span className=\"task\" style={s} onClick={()=>{onComplete(todo)}}>{todo.text}</span>\r\n      <span onClick={()=>{onDelete(todo._id)}} className=\"btn-close\">X</span>\r\n   </li>)\r\n};","export function apiCall(path, options = {}) {\r\n   const url = '/api' + path;\r\n\r\n   return new Promise((resolve, reject) => {\r\n      fetch(url, options)\r\n      .then(res => {\r\n         if (res.ok) return res.json().then(data => resolve(data));\r\n         if (res.status >= 400 && res.status < 500) {\r\n            return res.json().then(data => reject(data.error));\r\n         } else {\r\n            return reject({message: 'Cannot reach the server. Try again later'});\r\n         }\r\n      })\r\n      .catch(err => console.log(`caught: ${err.message}`));\r\n   });\r\n};","export const LOAD_TODOS = 0;\r\nexport const DEL_TODO   = 1;\r\nexport const UPD_TODO   = 2;\r\nexport const ADD_TODO   = 3;\r\n\r\nexport const ADD_ERROR     = 10;\r\nexport const REMOVE_ERROR  = 11;","import { ADD_ERROR, REMOVE_ERROR } from '../actionTypes';\r\n\r\nexport const addError = error => ({\r\n   type: ADD_ERROR,\r\n   error\r\n});\r\nexport const removeError = () => ({\r\n   type: REMOVE_ERROR,\r\n});","import { apiCall } from '../../services/api';\r\nimport { addError } from './errors';\r\nimport { LOAD_TODOS, ADD_TODO, DEL_TODO, UPD_TODO } from '../actionTypes';\r\n\r\nconst _getTodos = todos => ({\r\n   type: LOAD_TODOS,\r\n   todos\r\n});\r\n\r\nconst _addTodo = todo => ({\r\n   type: ADD_TODO,\r\n   todo\r\n});\r\n\r\nconst _updateTodo = todo => ({\r\n   type: UPD_TODO,\r\n   todo\r\n});\r\n\r\nconst _deleteTodo = id => ({\r\n   type: DEL_TODO,\r\n   id\r\n});\r\n\r\nexport function getTodos() {\r\n   return function(dispatch) {\r\n      return apiCall('/todos')\r\n      .then(res => dispatch(_getTodos(res)))\r\n      .catch(err => dispatch(addError(err.message)));\r\n   };\r\n};\r\n\r\nexport function deleteTodo(id) {\r\n   return function(dispatch) {\r\n      return new Promise((resolve, reject) => {\r\n         return apiCall(`/todos/${id}`, {method: 'delete'})\r\n         .then(res => {\r\n            dispatch(_deleteTodo(res._id));\r\n            resolve();\r\n         })\r\n         .catch(err => {\r\n            dispatch(addError(err.message));\r\n            reject(err);\r\n         });\r\n      });\r\n   };\r\n};\r\n\r\nexport function createTodo(text) {\r\n   return function(dispatch) {\r\n      return new Promise((resolve, reject) => {\r\n         const options = {\r\n            method: 'post',\r\n            headers: new Headers({\r\n               'Content-Type': 'application/json'\r\n            }),\r\n            body: JSON.stringify({text})\r\n         };\r\n         return apiCall(`/todos`, options)\r\n            .then((res) => {\r\n               dispatch(_addTodo(res));\r\n               resolve()\r\n            })\r\n            .catch(err => {\r\n               dispatch(addError(err.message));\r\n               reject(err);\r\n            });\r\n      });\r\n   };\r\n};\r\n\r\nexport function updateTodo(todo) {\r\n   return function(dispatch) {\r\n      return new Promise((resolve, reject) => {\r\n         const completed = !todo.completed;\r\n         const options = {\r\n            method: 'put',\r\n            headers: new Headers({\r\n               'Content-Type': 'application/json'\r\n            }),\r\n            body: JSON.stringify({completed})\r\n         };\r\n         return apiCall(`/todos/${todo._id}`, options)\r\n            .then(res => {\r\n               dispatch(_updateTodo(res));\r\n               resolve();\r\n            })\r\n            .catch(err => {\r\n               dispatch(addError(err.message));\r\n               reject(err);\r\n            });\r\n      });\r\n   };\r\n};","import React, {Component} from 'react';\r\n\r\n\r\nexport default class NewTodoForm extends Component {\r\n   constructor(props){\r\n      super(props)\r\n      this.state = {\r\n         text: \"\"\r\n      };\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n   };\r\n\r\n   handleSubmit(e){\r\n      e.preventDefault();\r\n      this.props.createTodo(this.state.text)\r\n         .then(this.props.history.push('/todos'))\r\n         .catch(err=>{console.log(err)});\r\n      e.target.reset();\r\n   };\r\n\r\n   handleChange(e){\r\n      const text = {[e.target.name]: e.target.value}\r\n      this.setState(text);\r\n   };\r\n\r\n   static defaultProps = {\r\n      handleSubmit() {console.log('handleSubmit prop is missing from newTodoForm')},\r\n      text() {'text prop is missing from newTaskForm'},\r\n   }\r\n\r\n   render(){\r\n      const {text} = this.state;\r\n      return (<form onSubmit={this.handleSubmit}>\r\n         <label htmlFor=\"task\">Task</label>\r\n         <input type=\"text\" name=\"text\" id=\"task\"\r\n            autoComplete=\"off\"\r\n            value={text} \r\n            onChange={this.handleChange}/>\r\n         <button type=\"submit\" className=\"btn\">Add</button>\r\n      </form>\r\n   )}\r\n}","import React, {Component} from 'react';\r\nimport Todo from './TodoItem';\r\nimport {connect} from 'react-redux';\r\nimport {getTodos, createTodo, updateTodo, deleteTodo} from './store/actions/todos';\r\nimport {Route} from 'react-router-dom';\r\nimport NewTodoForm from './NewTodoForm';\r\n\r\nclass TodoList extends Component {\r\n\r\n   componentWillMount() {\r\n      this.props.getTodos();\r\n   };\r\n   createTodo(val) {\r\n      return this.props.createTodo(val);\r\n   };\r\n   deleteTodo(id) {\r\n      this.props.deleteTodo(id);\r\n   };\r\n   completeTask(todo) {\r\n      this.props.updateTodo(todo);\r\n   };\r\n\r\n   render(){\r\n      let todos = this.props.todos.map(t =>\r\n         <Todo \r\n            key={t._id} \r\n            todo={t}\r\n            onDelete={id=>this.deleteTodo(id)}\r\n            onComplete={todo=>this.completeTask(todo)}\r\n         />)\r\n      if (!todos.length) todos = <div>List is empty</div>\r\n      return (\r\n         <div className=\"container\">\r\n            <Route exact path='/todos' component={()=><ul>{todos}</ul>} />\r\n            <Route path='/todos/new' component={({history})=>(\r\n               <NewTodoForm history={history} createTodo={val=>this.createTodo(val)} />\r\n            )} />\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nfunction mapStateToProps(reduxState){\r\n   return {...reduxState};\r\n};\r\n\r\nexport default connect(mapStateToProps, { getTodos, createTodo, deleteTodo, updateTodo })(TodoList);","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport default () => (\r\n   <nav>\r\n      <NavLink exact to='/todos' activeClassName='nav-active'>See todos</NavLink>\r\n      <NavLink to='/todos/new' activeClassName='nav-active'>Add todos</NavLink>\r\n   </nav>\r\n);","import React, {Component} from 'react';\nimport './App.css';\nimport TodosList from './TodosList';\nimport Nav from './Nav';\nimport {Route, Redirect} from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"TodosApp\">\n        <h1>Todos App</h1>\n        <Nav />\n        <Route path='/todos' component={TodosList} />\n        <Route exact path='/' render={() => <Redirect to='/todos' />} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport errors from './errors';\r\nimport todos from './todos';\r\n\r\nconst rootReducer = combineReducers({\r\n   errors,\r\n   todos\r\n})\r\n\r\nexport default rootReducer;","import { ADD_ERROR, REMOVE_ERROR } from '../actionTypes';\r\n\r\nexport default function(state = {message: null}, action) {\r\n   switch (action.type) {\r\n      case ADD_ERROR:\r\n         return { message: action.error };\r\n      case REMOVE_ERROR:\r\n         return { message: null };\r\n      default:\r\n         return state;\r\n   }\r\n};","import { LOAD_TODOS, ADD_TODO, UPD_TODO, DEL_TODO } from '../actionTypes';\r\n\r\nexport default function(state = [], action) {\r\n   let newState = [...state];\r\n   switch (action.type) {\r\n      case LOAD_TODOS:\r\n         newState = [...action.todos];\r\n         break;\r\n      case ADD_TODO:\r\n         newState.push(action.todo);\r\n         break;\r\n      case UPD_TODO:\r\n         newState = state.map(t=>(t._id === action.todo._id) ? action.todo : t);\r\n         break;\r\n      case DEL_TODO:\r\n         newState = state.filter(p => p._id !== action.id);\r\n         break;\r\n      default:\r\n   };\r\n   return newState;\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from './store';\nconst store = configureStore();\n\nReactDOM.render(\n   <Provider store={store}>\n      <BrowserRouter>\n         <App />\n      </BrowserRouter>\n   </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import rootReducer from './reducers';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport default function configureStore() {\r\n   const store = createStore(rootReducer,\r\n      compose(\r\n         applyMiddleware(thunk)\r\n         // , window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n      )\r\n   );\r\n   return store;\r\n};"],"sourceRoot":""}